&4Cygnus Networks&0 are created by placing &1Cygnus Sparks&0. The &4Stack&0 "lives" on the &1Master Cygnus Spark&0; placing other &1Cygnus Sparks&0 will extend the influence of the &4network&0 to those areas, allowing additional &4Cygnus-aligned blocks&0 to join the network, view, and manipulate the same &4stack&0.
The &4Cygnus Network&0 is essentially a more abstracted form of the &4Corporea Network&0 - it works on pieces of &4data&0 that can be freely copied and modified at will, instead of needing to be backed by the motion of real &4items&0. If "&364 diamond blocks&0" is a piece of data on a &4stack&0, it does not imply anything about real items - you're only talking &oabout&0 64 diamond blocks.
A &4stack&0 data structure is like a list, but only the &4top&0 items of the list can be accessed. &4Pushing&0 data onto the stack puts it above the &4top&0 of the stack and it becomes the new &4top&0. &4Popping&0 data from the stack removes it from the stack; whatever was below becomes the new &4top&0. There's no way to push or pop data from the &4middle&0 or &4bottom&0 of the stack, besides moving whatever's above it &4out of the way&0 first.
&4Cygnus-aligned things&0 can manipulate the stack. The &1Funnel&0 can copy real-world signals as &4data&0 onto the stack or interpret data on the stack as &4real-world signals&0. &1Words&0 perform &4functions&0 on the stack, and &1Crystal Cubes&0 test &4conditions&0 against the stack. &1Retainers&0 and &1Tickets&0 store data off-stack in the forms of &4blocks&0 and &4items&0. See their respective &1Lexica Botania&0 entries for more information.
Cygnus Datatypes
What can you put on the stack?
There are a few different &4types&0 of data that can be put on the &4stack&0 associated with a &1Master Cygnus Spark&0. Some actions make sense on all &4types&0 of data (like &1Cygnus Word: Duplicate&0 or injecting into a &1Cygnus Retainer&0), but most actions are only defined for one &4type&0. Trying to perform a typed action while the top of the &4stack&0 contains data of the wrong &4type&0 will push a &3Type mismatch&0 error onto the &4stack&0.